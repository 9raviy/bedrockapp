AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to provision a Lambda function and IAM roles for querying Bedrock Claude model.

Resources:
  # S3 Bucket for Frontend Hosting
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600

  # S3 Bucket Policy for Public Read Access
  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "${FrontendS3Bucket}/*"

  # CloudFront Origin Access Identity
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName}"

  # IAM Role for Lambda Function (ONLY THIS ONE)
  BedrockQueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: bedrock-query-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - "arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::my-lambda-deployment-bucket-for-bedrock2/*"

  # Lambda Function
  BedrockQueryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-query
      Runtime: nodejs20.x
      Handler: src/handlers/queryBedrock.handler
      Role: !GetAtt BedrockQueryLambdaRole.Arn
      Code:
        S3Bucket: my-lambda-deployment-bucket-for-bedrock2
        S3Key: function.zip
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          BEDROCK_MODEL_ID: anthropic.claude-3-5-sonnet-20241022-v2:0

  # API Gateway REST API
  BedrockQuizApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bedrock-quiz-api
      Description: API Gateway for Bedrock Quiz Lambda function
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  QuizResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ParentId: !GetAtt BedrockQuizApiGateway.RootResourceId
      PathPart: quiz

  # API Gateway Method (POST)
  QuizMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ResourceId: !Ref QuizResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockQueryLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  # API Gateway Method (OPTIONS for CORS)
  QuizMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ResourceId: !Ref QuizResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - QuizMethodPost
      - QuizMethodOptions
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockQueryLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BedrockQuizApiGateway}/*/*"

  # CloudFront Distribution for Frontend
  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub "CloudFront distribution for ${AWS::StackName}"
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendS3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        PriceClass: PriceClass_100
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref BedrockQueryLambdaFunction

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt BedrockQueryLambdaFunction.Arn

  ApiGatewayUrl:
    Description: API Gateway endpoint URL for the quiz function
    Value: !Sub "https://${BedrockQuizApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/quiz"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayUrl"

  FrontendS3BucketName:
    Description: Name of the S3 bucket for frontend hosting
    Value: !Ref FrontendS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-FrontendS3BucketName"

  FrontendS3BucketWebsiteURL:
    Description: S3 bucket website URL for the frontend
    Value: !GetAtt FrontendS3Bucket.WebsiteURL
    Export:
      Name: !Sub "${AWS::StackName}-FrontendS3BucketWebsiteURL"

  FrontendCloudFrontURL:
    Description: CloudFront distribution URL for the frontend
    Value: !Sub "https://${FrontendCloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-FrontendCloudFrontURL"

  FrontendCloudFrontDistributionId:
    Description: CloudFront distribution ID for cache invalidation
    Value: !Ref FrontendCloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-FrontendCloudFrontDistributionId"
