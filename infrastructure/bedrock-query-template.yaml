AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to provision a Lambda function and IAM roles for querying Bedrock Claude model.

Parameters:
  Environment:
    Type: String
    Description: Environment name (prod, dev, staging)
    Default: "prod"
    AllowedValues: ["prod", "dev", "staging"]

  DomainName:
    Type: String
    Description: Your custom domain name (e.g., yourdomain.com)
    Default: "hexmi.com"

  SubdomainName:
    Type: String
    Description: Subdomain for the quiz app (e.g., quiz, dev-quiz)
    Default: "quiz"

  HostedZoneId:
    Type: String
    Description: Route 53 Hosted Zone ID for your domain
    Default: "Z01335492T06E59B8E8ZZ" # Your hexmi.com hosted zone ID

Conditions:
  UseCustomDomain: !Not [!Equals [!Ref HostedZoneId, ""]]
  IsProduction: !Equals [!Ref Environment, "prod"]

Resources:
  # NOTE: SSL Certificate for custom domains requires manual setup in us-east-1
  # For now, we'll deploy without custom SSL and use CloudFront default certificate

  # S3 Bucket for Frontend Hosting
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3600

  # S3 Bucket Policy (MOST RELIABLE)
  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    DependsOn: FrontendS3Bucket
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:GetObject"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref FrontendS3Bucket
                  - "/*"
          - Sid: PublicListBucket
            Effect: Allow
            Principal: "*"
            Action:
              - "s3:ListBucket"
            Resource:
              - !Join
                - ""
                - - "arn:aws:s3:::"
                  - !Ref FrontendS3Bucket

  # IAM Role for Lambda Function
  BedrockQueryLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: bedrock-query-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModelWithResponseStream
                Resource:
                  - "arn:aws:bedrock:us-west-2::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::my-lambda-deployment-bucket-for-bedrock2/*"

  # Lambda Function
  BedrockQueryLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: bedrock-query
      Runtime: nodejs20.x
      Handler: src/handlers/queryBedrock.handler
      Role: !GetAtt BedrockQueryLambdaRole.Arn
      Code:
        S3Bucket: my-lambda-deployment-bucket-for-bedrock2
        S3Key: function.zip
      Timeout: 15
      MemorySize: 128
      Environment:
        Variables:
          BEDROCK_MODEL_ID: anthropic.claude-3-5-sonnet-20241022-v2:0

  # API Gateway REST API
  BedrockQuizApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: bedrock-quiz-api
      Description: API Gateway for Bedrock Quiz Lambda function
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource
  QuizResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ParentId: !GetAtt BedrockQuizApiGateway.RootResourceId
      PathPart: quiz

  # API Gateway Method (POST)
  QuizMethodPost:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ResourceId: !Ref QuizResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockQueryLambdaFunction.Arn}/invocations"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false # ← Must be uppercase 'M'

  # API Gateway Method (OPTIONS for CORS)
  QuizMethodOptions:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      ResourceId: !Ref QuizResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
            ResponseTemplates:
              application/json: ""
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: false
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false # ← Must be uppercase 'M'

  # API Gateway Deployment
  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - QuizMethodPost
      - QuizMethodOptions
    Properties:
      RestApiId: !Ref BedrockQuizApiGateway
      StageName: prod

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BedrockQueryLambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BedrockQuizApiGateway}/*/*"

  # SSL Certificate (Required for custom domain)
  SSLCertificate:
    Type: AWS::CertificateManager::Certificate
    Condition: UseCustomDomain
    Properties:
      DomainName: !If
        - IsProduction
        - !Ref DomainName # hexmi.com for production
        - !Sub "${SubdomainName}.${DomainName}" # quiz.hexmi.com for dev
      SubjectAlternativeNames:
        - !Sub "${SubdomainName}.${DomainName}" # Always include quiz.hexmi.com
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId
        - DomainName: !Sub "${SubdomainName}.${DomainName}"
          HostedZoneId: !Ref HostedZoneId

  # CloudFront Distribution (Updated for custom domain)
  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If
          - UseCustomDomain
          - !If
            - IsProduction
            - [!Ref DomainName, !Sub "${SubdomainName}.${DomainName}"] # Both hexmi.com and quiz.hexmi.com
            - [!Sub "${SubdomainName}.${DomainName}"] # Only quiz.hexmi.com for dev
          - !Ref AWS::NoValue

        ViewerCertificate: !If
          - UseCustomDomain
          - AcmCertificateArn: !Ref SSLCertificate
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true

        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          Compress: true
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendS3Bucket.RegionalDomainName
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        PriceClass: PriceClass_100
        # Use CloudFront default certificate instead of custom SSL
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html

  # Route 53 DNS Records
  DNSRecordMain:
    Type: AWS::Route53::RecordSet
    Condition: IsProduction
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName # hexmi.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt FrontendCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  DNSRecordSubdomain:
    Type: AWS::Route53::RecordSet
    Condition: UseCustomDomain
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${SubdomainName}.${DomainName}" # quiz.hexmi.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt FrontendCloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  LambdaFunctionName:
    Description: Name of the Lambda function
    Value: !Ref BedrockQueryLambdaFunction

  LambdaFunctionArn:
    Description: ARN of the Lambda function
    Value: !GetAtt BedrockQueryLambdaFunction.Arn

  ApiGatewayUrl:
    Description: API Gateway endpoint URL for the quiz function
    Value: !Sub "https://${BedrockQuizApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/quiz"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayUrl"

  FrontendS3BucketName:
    Description: Name of the S3 bucket for frontend hosting
    Value: !Ref FrontendS3Bucket
    Export:
      Name: !Sub "${AWS::StackName}-FrontendS3BucketName"

  FrontendS3BucketWebsiteURL:
    Description: S3 bucket website URL for the frontend
    Value: !GetAtt FrontendS3Bucket.WebsiteURL
    Export:
      Name: !Sub "${AWS::StackName}-FrontendS3BucketWebsiteURL"

  FrontendCloudFrontURL:
    Description: CloudFront distribution URL for the frontend
    Value: !Sub "https://${FrontendCloudFrontDistribution.DomainName}"
    Export:
      Name: !Sub "${AWS::StackName}-FrontendCloudFrontURL"

  CustomDomainURL:
    Description: Custom domain URL (disabled - requires SSL setup in us-east-1)
    Value: !Sub "Will be available at https://${SubdomainName}.${DomainName} after manual SSL setup"

  # SSLCertificateArn:
  #   Description: SSL Certificate ARN (if created)
  #   Condition: UseCustomDomain
  #   Value: !Ref SSLCertificate
  #   Export:
  #     Name: !Sub "${AWS::StackName}-SSLCertificateArn"

  FrontendCloudFrontDistributionId:
    Description: CloudFront distribution ID for cache invalidation
    Value: !Ref FrontendCloudFrontDistribution
    Export:
      Name: !Sub "${AWS::StackName}-FrontendCloudFrontDistributionId"
