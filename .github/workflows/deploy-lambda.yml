name: Deploy Lambda Function and CloudFormation Stack

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Navigate to backend folder and install dependencies
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # Step 4: Debug AWS CLI Configuration
      - name: Debug AWS CLI Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure list

      # Step 5: Zip the Lambda function code
      - name: Zip Lambda function
        working-directory: backend
        run: zip -r function.zip . -x "*.git*" "node_modules/aws-sdk/*"

      # Step 6: Upload the zip file to S3
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws s3 cp function.zip s3://my-lambda-deployment-bucket-for-bedrock2/function.zip

      # Step 7: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: infrastructure
        run: |
          echo "üöÄ Deploying CloudFormation stack..."

          # Deploy the stack with a longer timeout
          aws cloudformation deploy \
            --template-file bedrock-query-template.yaml \
            --stack-name bedrock-query-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
            || echo "Deploy command completed with warnings"

          echo "‚è≥ Ensuring stack is in a stable state..."

          # Wait for the stack to be in a complete state
          for i in {1..10}; do
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --region ${{ secrets.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "Stack status: $STATUS"
            
            if [[ "$STATUS" == "CREATE_COMPLETE" || "$STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "‚úÖ Stack is ready!"
              break
            elif [[ "$STATUS" == *"FAILED"* || "$STATUS" == *"ROLLBACK"* ]]; then
              echo "‚ùå Stack deployment failed with status: $STATUS"
              aws cloudformation describe-stack-events \
                --stack-name bedrock-query-stack \
                --region ${{ secrets.AWS_REGION }} \
                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
                --output table
              exit 1
            else
              echo "‚è≥ Waiting for stack (attempt $i/10)..."
              sleep 30
            fi
          done

      # Step 8: Deploy the Lambda function
      - name: Deploy Lambda function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws lambda update-function-code \
            --function-name bedrock-query \
            --s3-bucket my-lambda-deployment-bucket-for-bedrock2 \
            --s3-key function.zip \
            --region ${{ secrets.AWS_REGION }}

      # Step 9: Get API Gateway URL from CloudFormation outputs
      - name: Get API Gateway URL
        id: get-api-url
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

      # Step 10: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      # Step 11: Update API endpoint in frontend
      - name: Update API endpoint
        working-directory: frontend/src
        run: |
          sed -i 's|const LAMBDA_ENDPOINT = ".*";|const LAMBDA_ENDPOINT = "${{ steps.get-api-url.outputs.API_URL }}";|' api.js

      # Step 12: Build frontend
      - name: Build frontend
        working-directory: frontend
        run: |
          echo "üèóÔ∏è Building React frontend..."
          npm run build
          echo "üìÅ Checking build output..."
          ls -la build/
          if [ ! -f "build/index.html" ]; then
            echo "‚ùå Build failed - index.html not found"
            exit 1
          fi
          echo "‚úÖ Frontend build completed successfully"

      # Step 13: Get S3 bucket name from CloudFormation outputs
      - name: Get S3 bucket name
        id: get-bucket-name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "‚è≥ Waiting for stack to be fully deployed..."
          aws cloudformation wait stack-update-complete --stack-name bedrock-query-stack --region ${{ secrets.AWS_REGION }} || true
          aws cloudformation wait stack-create-complete --stack-name bedrock-query-stack --region ${{ secrets.AWS_REGION }} || true

          echo "üìã Getting S3 bucket name..."
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendS3BucketName`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }} 2>/dev/null || echo "")

          # Improved validation
          if [ -z "$BUCKET_NAME" ] || [ "$BUCKET_NAME" = "None" ] || [ "$BUCKET_NAME" = "null" ] || [ "$BUCKET_NAME" = "[]" ]; then
            echo "‚ùå Error: Frontend S3 bucket not found in stack outputs"
            echo ""
            echo "üìã Available stack outputs:"
            aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --query 'Stacks[0].Outputs[*].{Key:OutputKey,Value:OutputValue}' \
              --region ${{ secrets.AWS_REGION }} \
              --output table || echo "Failed to get stack outputs"
            echo ""
            echo "üîç This usually means the CloudFormation template is missing frontend resources."
            echo "üí° Try deleting and redeploying the stack with the complete template."
            exit 1
          fi

          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Found S3 bucket: $BUCKET_NAME"

      # Step 14: Deploy frontend to S3
      - name: Deploy frontend to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: frontend
        run: |
          echo "üöÄ Deploying frontend to S3..."
          echo "üìÅ Bucket: ${{ steps.get-bucket-name.outputs.BUCKET_NAME }}"

          # Sync with proper content types
          aws s3 sync build/ s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }} \
            --delete \
            --exact-timestamps \
            --metadata-directive REPLACE \
            --cache-control "max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          # Upload HTML files with no-cache
          aws s3 sync build/ s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }} \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

          echo "‚úÖ Frontend deployed to S3"

      # Step 15: Get CloudFront Distribution ID
      - name: Get CloudFront Distribution ID
        id: get-distribution-id
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üìã Getting CloudFront distribution ID..."

          # Get distribution ID directly from CloudFormation output
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendCloudFrontDistributionId`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }} 2>/dev/null || echo "")

          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
            echo "‚ö†Ô∏è Warning: CloudFront distribution ID not found in outputs"
            echo "üîç Trying alternative method..."
            
            # Fallback: extract from URL
            CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --query 'Stacks[0].Outputs[?OutputKey==`FrontendCloudFrontURL`].OutputValue' \
              --output text \
              --region ${{ secrets.AWS_REGION }} 2>/dev/null || echo "")
            
            if [ -n "$CLOUDFRONT_URL" ] && [ "$CLOUDFRONT_URL" != "None" ]; then
              DISTRIBUTION_ID=$(echo "$CLOUDFRONT_URL" | sed 's|https://||' | sed 's|\.cloudfront\.net.*||')
            fi
          fi

          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
            echo "‚ùå Error: Could not determine CloudFront distribution ID"
            echo "üìã Available outputs:"
            aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --query 'Stacks[0].Outputs[*].{Key:OutputKey,Value:OutputValue}' \
              --region ${{ secrets.AWS_REGION }} \
              --output table
            exit 1
          fi

          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT
          echo "‚úÖ Found CloudFront distribution ID: $DISTRIBUTION_ID"

      # Step 16: Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîÑ Creating CloudFront invalidation..."

          INVALIDATION_ID=$(aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-distribution-id.outputs.DISTRIBUTION_ID }} \
            --paths "/*" \
            --query 'Invalidation.Id' \
            --output text)

          echo "‚úÖ CloudFront invalidation created: $INVALIDATION_ID"
          echo "‚è≥ Cache invalidation may take 5-15 minutes to complete"

      # Step 17: Display deployment URLs
      - name: Display deployment URLs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "‚úÖ Deployment completed successfully!"
          echo ""
          echo "üîó Application URLs:"
          echo "  Frontend (CloudFront): $(aws cloudformation describe-stacks --stack-name bedrock-query-stack --query 'Stacks[0].Outputs[?OutputKey==\`FrontendCloudFrontURL\`].OutputValue' --output text --region ${{ secrets.AWS_REGION }})"
          echo "  Frontend (S3): $(aws cloudformation describe-stacks --stack-name bedrock-query-stack --query 'Stacks[0].Outputs[?OutputKey==\`FrontendS3BucketWebsiteURL\`].OutputValue' --output text --region ${{ secrets.AWS_REGION }})"
          echo "  API Gateway: ${{ steps.get-api-url.outputs.API_URL }}"
          echo ""
          echo "üéâ Your Adaptive Quiz App is now live!"
