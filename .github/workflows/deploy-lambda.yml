name: Deploy Lambda Function and CloudFormation Stack

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Navigate to backend folder and install dependencies
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # Step 4: Debug AWS CLI Configuration
      - name: Debug AWS CLI Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure list

      # Step 5: Zip the Lambda function code
      - name: Zip Lambda function
        working-directory: backend
        run: zip -r function.zip . -x "*.git*" "node_modules/aws-sdk/*"

      # Step 6: Upload the zip file to S3
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws s3 cp function.zip s3://my-lambda-deployment-bucket-for-bedrock2/function.zip

      # Step 7: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: infrastructure
        run: |
          aws cloudformation deploy \
            --template-file bedrock-query-template.yaml \
            --stack-name bedrock-query-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --debug

      # Step 8: Deploy the Lambda function
      - name: Deploy Lambda function
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws lambda update-function-code \
            --function-name bedrock-query \
            --s3-bucket my-lambda-deployment-bucket-for-bedrock2 \
            --s3-key function.zip \
            --region ${{ secrets.AWS_REGION }}

      # Step 9: Get API Gateway URL from CloudFormation outputs
      - name: Get API Gateway URL
        id: get-api-url
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          API_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "API_URL=$API_URL" >> $GITHUB_OUTPUT

      # Step 10: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm install

      # Step 11: Update API endpoint in frontend
      - name: Update API endpoint
        working-directory: frontend/src
        run: |
          sed -i 's|const LAMBDA_ENDPOINT = ".*";|const LAMBDA_ENDPOINT = "${{ steps.get-api-url.outputs.API_URL }}";|' api.js

      # Step 12: Build frontend
      - name: Build frontend
        working-directory: frontend
        run: npm run build

      # Step 13: Get S3 bucket name from CloudFormation outputs
      - name: Get S3 bucket name
        id: get-bucket-name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendS3BucketName`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT

      # Step 14: Deploy frontend to S3
      - name: Deploy frontend to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: frontend
        run: |
          aws s3 sync build/ s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }} --delete

      # Step 15: Get CloudFront Distribution ID and invalidate cache
      - name: Get CloudFront Distribution ID
        id: get-distribution-id
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendCloudFrontURL`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})
          DISTRIBUTION_ID=$(echo $CLOUDFRONT_URL | sed 's|https://||' | sed 's|\.cloudfront\.net||')
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      # Step 16: Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ steps.get-distribution-id.outputs.DISTRIBUTION_ID }} \
            --paths "/*"

      # Step 17: Display deployment URLs
      - name: Display deployment URLs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "âœ… Deployment completed successfully!"
          echo ""
          echo "ðŸ”— Application URLs:"
          echo "  Frontend (CloudFront): $(aws cloudformation describe-stacks --stack-name bedrock-query-stack --query 'Stacks[0].Outputs[?OutputKey==\`FrontendCloudFrontURL\`].OutputValue' --output text --region ${{ secrets.AWS_REGION }})"
          echo "  Frontend (S3): $(aws cloudformation describe-stacks --stack-name bedrock-query-stack --query 'Stacks[0].Outputs[?OutputKey==\`FrontendS3BucketWebsiteURL\`].OutputValue' --output text --region ${{ secrets.AWS_REGION }})"
          echo "  API Gateway: ${{ steps.get-api-url.outputs.API_URL }}"
          echo ""
          echo "ðŸŽ‰ Your Adaptive Quiz App is now live!"
