name: Deploy Lambda Function and CloudFormation Stack

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Navigate to backend folder and install dependencies
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # Step 4: Debug AWS CLI Configuration
      - name: Debug AWS CLI Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure list

      # Step 5: Zip the Lambda function code
      - name: Zip Lambda function
        working-directory: backend
        run: zip -r function.zip . -x "*.git*" "node_modules/aws-sdk/*"

      # Step 6: Upload the zip file to S3
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws s3 cp function.zip s3://my-lambda-deployment-bucket-for-bedrock2/function.zip

      # Step 6.5: Handle rollback state (MOVED BEFORE DEPLOY)
      - name: Handle stack rollback state
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîç Checking stack status..."

          STATUS=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "STACK_NOT_EXISTS")

          echo "Current stack status: $STATUS"

          if [[ "$STATUS" == *"ROLLBACK_COMPLETE"* ]] || [[ "$STATUS" == *"FAILED"* ]]; then
            echo "‚ö†Ô∏è Stack is in failed state: $STATUS"
            echo "üóëÔ∏è Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name bedrock-query-stack \
              --region ${{ secrets.AWS_REGION }}
            
            echo "‚è≥ Waiting for stack deletion (this may take 2-5 minutes)..."
            aws cloudformation wait stack-delete-complete \
              --stack-name bedrock-query-stack \
              --region ${{ secrets.AWS_REGION }}
            
            echo "‚úÖ Failed stack deleted. Ready for fresh deployment."
          elif [[ "$STATUS" == "STACK_NOT_EXISTS" ]]; then
            echo "‚úÖ No existing stack found. Ready for fresh deployment."
          else
            echo "‚úÖ Stack is in good state: $STATUS"
          fi

      # Step 7: Deploy CloudFormation Stack (NOW RUNS AFTER CLEANUP)
      - name: Deploy CloudFormation Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: infrastructure
        run: |
          echo "üöÄ Deploying CloudFormation stack..."

          # Deploy the stack with a longer timeout
          aws cloudformation deploy \
            --template-file bedrock-query-template.yaml \
            --stack-name bedrock-query-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --no-fail-on-empty-changeset \
            || echo "Deploy command completed with warnings"

          echo "‚è≥ Ensuring stack is in a stable state..."

          # Wait for the stack to be in a complete state
          for i in {1..20}; do  # Increased from 10 to 20 attempts
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --region ${{ secrets.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "Stack status: $STATUS"
            
            if [[ "$STATUS" == "CREATE_COMPLETE" || "$STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "‚úÖ Stack is ready!"
              break
            elif [[ "$STATUS" == *"FAILED"* || "$STATUS" == *"ROLLBACK"* ]]; then
              echo "‚ùå Stack deployment failed with status: $STATUS"
              aws cloudformation describe-stack-events \
                --stack-name bedrock-query-stack \
                --region ${{ secrets.AWS_REGION }} \
                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
                --output table
              exit 1
            else
              echo "‚è≥ Waiting for stack (attempt $i/20)..."
              sleep 30
            fi
          done

      # Continue with Step 8, 9, etc...
