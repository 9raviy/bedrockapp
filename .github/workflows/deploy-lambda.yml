name: Deploy to Production Environment

on:
  push:
    branches:
      - main # Trigger deployment on pushes to the main branch
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # Step 3: Load environment configuration
      - name: Load Production Configuration
        run: |
          echo "üìã Loading production environment configuration..."
          CONFIG=$(cat config/environments/prod.json)
          
          echo "PROJECT_NAME=$(echo $CONFIG | jq -r '.projectName')" >> $GITHUB_ENV
          echo "ENVIRONMENT=$(echo $CONFIG | jq -r '.environment')" >> $GITHUB_ENV
          echo "DOMAIN_NAME=$(echo $CONFIG | jq -r '.domain.domainName')" >> $GITHUB_ENV
          echo "SUBDOMAIN_NAME=$(echo $CONFIG | jq -r '.domain.subdomainName')" >> $GITHUB_ENV
          echo "HOSTED_ZONE_ID=$(echo $CONFIG | jq -r '.domain.hostedZoneId')" >> $GITHUB_ENV
          echo "LAMBDA_TIMEOUT=$(echo $CONFIG | jq -r '.backend.timeout')" >> $GITHUB_ENV
          echo "LAMBDA_MEMORY=$(echo $CONFIG | jq -r '.backend.memory')" >> $GITHUB_ENV
          echo "STACK_NAME=$(echo $CONFIG | jq -r '.infrastructure.stackName')" >> $GITHUB_ENV
          
          echo "‚úÖ Configuration loaded for environment: $ENVIRONMENT"

      # Step 4: Navigate to backend folder and install dependencies
      - name: Install dependencies
        working-directory: backend
        run: npm install

      # Step 5: Debug AWS CLI Configuration
      - name: Debug AWS CLI Configuration
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure list

      # Step 5: Zip the Lambda function code
      - name: Zip Lambda function
        working-directory: backend
        run: zip -r function.zip . -x "*.git*" "node_modules/aws-sdk/*"

      # Step 6: Upload the zip file to S3
      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: backend
        run: |
          aws s3 cp function.zip s3://my-lambda-deployment-bucket-for-bedrock2/function.zip

      # Step 6.5: Handle rollback state (MOVED BEFORE DEPLOY)
      - name: Handle stack rollback state
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîç Checking stack status..."

          STATUS=$(aws cloudformation describe-stacks \
            --stack-name $STACK_NAME \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "STACK_NOT_EXISTS")

          echo "Current stack status: $STATUS"

          if [[ "$STATUS" == *"ROLLBACK_COMPLETE"* ]] || [[ "$STATUS" == *"FAILED"* ]]; then
            echo "‚ö†Ô∏è Stack is in failed state: $STATUS"
            echo "üóëÔ∏è Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name $STACK_NAME \
              --region ${{ secrets.AWS_REGION }}
            
            echo "‚è≥ Waiting for stack deletion (this may take 2-5 minutes)..."
            aws cloudformation wait stack-delete-complete \
              --stack-name $STACK_NAME \
              --region ${{ secrets.AWS_REGION }}
            
            echo "‚úÖ Failed stack deleted. Ready for fresh deployment."
          elif [[ "$STATUS" == "STACK_NOT_EXISTS" ]]; then
            echo "‚úÖ No existing stack found. Ready for fresh deployment."
          else
            echo "‚úÖ Stack is in good state: $STATUS"
          fi

      # Step 6.6: Deploy SSL Certificate in us-east-1 (NEW)
      - name: Deploy SSL Certificate in us-east-1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1  # Force us-east-1 for SSL certificate
          DOMAIN_NAME: "hexmi.com"
          SUBDOMAIN_NAME: "quiz"
          HOSTED_ZONE_ID: "Z01335492T06E59B8E8ZZ"
        working-directory: infrastructure
        run: |
          echo "üîí Deploying SSL Certificate in us-east-1..."
          
          # Check if SSL certificate stack already exists
          SSL_STATUS=$(aws cloudformation describe-stacks \
            --stack-name hexmi-ssl-certificate \
            --region us-east-1 \
            --query 'Stacks[0].StackStatus' \
            --output text 2>/dev/null || echo "STACK_NOT_EXISTS")
          
          echo "SSL Certificate stack status: $SSL_STATUS"
          
          # Deploy the SSL certificate stack
          aws cloudformation deploy \
            --template-file ssl-certificate-template.yaml \
            --stack-name hexmi-ssl-certificate \
            --capabilities CAPABILITY_IAM \
            --region us-east-1 \
            --parameter-overrides \
              DomainName=${DOMAIN_NAME} \
              SubdomainName=${SUBDOMAIN_NAME} \
              HostedZoneId=${HOSTED_ZONE_ID} \
            --no-fail-on-empty-changeset
          
          echo "‚è≥ Waiting for SSL certificate validation..."
          
          # Get certificate ARN
          CERT_ARN=$(aws cloudformation describe-stacks \
            --stack-name hexmi-ssl-certificate \
            --region us-east-1 \
            --query 'Stacks[0].Outputs[?OutputKey==`SSLCertificateArn`].OutputValue' \
            --output text)
          
          echo "üîí SSL Certificate ARN: $CERT_ARN"
          
          # Wait for certificate to be issued (with timeout)
          echo "‚è≥ Waiting for DNS validation (up to 10 minutes)..."
          for i in {1..20}; do
            CERT_STATUS=$(aws acm describe-certificate \
              --certificate-arn $CERT_ARN \
              --region us-east-1 \
              --query 'Certificate.Status' \
              --output text 2>/dev/null || echo "PENDING")
            
            echo "Certificate status: $CERT_STATUS (attempt $i/20)"
            
            if [[ "$CERT_STATUS" == "ISSUED" ]]; then
              echo "‚úÖ SSL Certificate is ready!"
              break
            elif [[ "$CERT_STATUS" == "FAILED" ]]; then
              echo "‚ùå SSL Certificate validation failed"
              echo "üìã Certificate details:"
              aws acm describe-certificate \
                --certificate-arn $CERT_ARN \
                --region us-east-1 \
                --query 'Certificate.DomainValidationOptions[*].[DomainName,ValidationStatus,ResourceRecord.Name,ResourceRecord.Value]' \
                --output table
              echo "‚ö†Ô∏è Continuing with deployment - certificate may validate later"
              break
            else
              echo "‚è≥ Waiting for certificate validation (30 seconds)..."
              sleep 30
            fi
          done

      # Step 7: Deploy CloudFormation Stack (UPDATED WITH SSL CERTIFICATE)
      - name: Deploy CloudFormation Stack
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PROJECT_NAME: "bedrock-quiz"
          ENVIRONMENT: "prod"
          DOMAIN_NAME: "hexmi.com"
          SUBDOMAIN_NAME: "quiz"
          HOSTED_ZONE_ID: "Z01335492T06E59B8E8ZZ"
          LAMBDA_TIMEOUT: "15"
          LAMBDA_MEMORY: "128"
        working-directory: infrastructure
        run: |
          echo "üöÄ Getting SSL Certificate ARN from us-east-1..."
          
          # Get SSL Certificate ARN from the us-east-1 stack
          SSL_CERT_ARN=$(aws cloudformation describe-stacks \
            --stack-name hexmi-ssl-certificate \
            --region us-east-1 \
            --query 'Stacks[0].Outputs[?OutputKey==`SSLCertificateArn`].OutputValue' \
            --output text 2>/dev/null || echo "")
          
          if [ -z "$SSL_CERT_ARN" ]; then
            echo "‚ö†Ô∏è SSL Certificate not found - deploying without custom domain"
            SSL_CERT_ARN=""
          else
            echo "üîí Using SSL Certificate: $SSL_CERT_ARN"
          fi
          
          # Deploy the main stack with SSL certificate reference
          aws cloudformation deploy \
            --template-file bedrock-query-template.yaml \
            --stack-name bedrock-query-stack \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ secrets.AWS_REGION }} \
            --parameter-overrides \
              ProjectName=${PROJECT_NAME} \
              Environment=${ENVIRONMENT} \
              DomainName=${DOMAIN_NAME} \
              SubdomainName=${SUBDOMAIN_NAME} \
              HostedZoneId=${HOSTED_ZONE_ID} \
              SSLCertificateArn=${SSL_CERT_ARN} \
              LambdaTimeout=${LAMBDA_TIMEOUT} \
              LambdaMemory=${LAMBDA_MEMORY} \
            --no-fail-on-empty-changeset

          echo "‚è≥ Ensuring stack is in a stable state..."

          # Wait for the stack to be in a complete state
          for i in {1..20}; do  # Increased from 10 to 20 attempts
            STATUS=$(aws cloudformation describe-stacks \
              --stack-name bedrock-query-stack \
              --region ${{ secrets.AWS_REGION }} \
              --query 'Stacks[0].StackStatus' \
              --output text)
            
            echo "Stack status: $STATUS"
            
            if [[ "$STATUS" == "CREATE_COMPLETE" || "$STATUS" == "UPDATE_COMPLETE" ]]; then
              echo "‚úÖ Stack is ready!"
              break
            elif [[ "$STATUS" == *"FAILED"* || "$STATUS" == *"ROLLBACK"* ]]; then
              echo "‚ùå Stack deployment failed with status: $STATUS"
              aws cloudformation describe-stack-events \
                --stack-name bedrock-query-stack \
                --region ${{ secrets.AWS_REGION }} \
                --query 'StackEvents[?ResourceStatus==`CREATE_FAILED` || ResourceStatus==`UPDATE_FAILED`].[LogicalResourceId,ResourceStatus,ResourceStatusReason]' \
                --output table
              exit 1
            else
              echo "‚è≥ Waiting for stack (attempt $i/20)..."
              sleep 30
            fi
          done

      # Step 7.5: Update Lambda function code directly (NEW)
      - name: Update Lambda function code
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PROJECT_NAME: "bedrock-quiz"
          ENVIRONMENT: "prod"
        run: |
          echo "üîÑ Updating Lambda function code directly..."

          aws lambda update-function-code \
            --function-name ${PROJECT_NAME}-${ENVIRONMENT}-backend \
            --s3-bucket my-lambda-deployment-bucket-for-bedrock2 \
            --s3-key function.zip \
            --region ${{ secrets.AWS_REGION }}

          echo "‚è≥ Waiting for Lambda function to be updated..."
          aws lambda wait function-updated \
            --function-name ${PROJECT_NAME}-${ENVIRONMENT}-backend \
            --region ${{ secrets.AWS_REGION }}

          echo "‚úÖ Lambda function code updated successfully"

      # Step 8: Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm install

      # Step 9: Build frontend
      - name: Build frontend
        working-directory: frontend
        run: |
          echo "üèóÔ∏è Building React frontend..."
          npm run build
          echo "üìÅ Checking build output..."
          ls -la build/
          if [ ! -f "build/index.html" ]; then
            echo "‚ùå Build failed - index.html not found"
            exit 1
          fi
          echo "‚úÖ Frontend build completed successfully"

      # Step 9.5: Update API endpoint in frontend (NEW)
      - name: Update API endpoint in frontend
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: frontend
        run: |
          echo "üîó Getting API Gateway URL from CloudFormation..."

          # Use the stack region from the environment variable
          STACK_REGION="${STACK_REGION:-${{ secrets.AWS_REGION }}}"
          echo "üìç Using region: $STACK_REGION"

          API_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text \
            --region $STACK_REGION)

          if [ -z "$API_URL" ] || [ "$API_URL" = "None" ]; then
            echo "‚ùå Error: API Gateway URL not found in stack outputs"
            exit 1
          fi

          echo "‚úÖ Found API URL: $API_URL"
          echo "üîÑ Updating api.js with correct endpoint..."

          # Update the API endpoint in api.js using Node.js for reliable replacement
          node -e "
            const fs = require('fs');
            const filePath = 'src/api.js';
            let content = fs.readFileSync(filePath, 'utf8');
            
            // Replace the LAMBDA_ENDPOINT definition (handles both single and multi-line formats)
            content = content.replace(
              /const LAMBDA_ENDPOINT\s*=\s*[\"'][^\"']*[\"'];?/,
              \`const LAMBDA_ENDPOINT = \"$API_URL\";\`
            );
            
            // Also handle multi-line format
            content = content.replace(
              /const LAMBDA_ENDPOINT\s*=\s*\n\s*[\"'][^\"']*[\"'];?/,
              \`const LAMBDA_ENDPOINT = \"$API_URL\";\`
            );
            
            fs.writeFileSync(filePath, content);
            console.log('‚úÖ API endpoint updated successfully');
          "

          # Verify the change
          echo "üìã Updated api.js content:"
          grep -A 1 "LAMBDA_ENDPOINT" src/api.js

          echo "‚úÖ API endpoint updated successfully"

      # Step 9.6: Rebuild frontend with updated API endpoint (NEW)
      - name: Rebuild frontend with updated API endpoint
        working-directory: frontend
        run: |
          echo "üèóÔ∏è Rebuilding frontend with updated API endpoint..."
          npm run build
          echo "‚úÖ Frontend rebuilt with correct API endpoint"

      # Step 10: Get S3 bucket name from CloudFormation outputs
      - name: Get S3 bucket name
        id: get-bucket-name
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üìã Getting S3 bucket name..."
          BUCKET_NAME=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendS3BucketName`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})

          if [ -z "$BUCKET_NAME" ] || [ "$BUCKET_NAME" = "None" ]; then
            echo "‚ùå Error: Frontend S3 bucket not found in stack outputs"
            exit 1
          fi

          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "‚úÖ Found S3 bucket: $BUCKET_NAME"

      # Step 11: Deploy frontend to S3
      - name: Deploy frontend to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        working-directory: frontend
        run: |
          echo "üöÄ Deploying frontend to S3..."
          echo "üìÅ Bucket: ${{ steps.get-bucket-name.outputs.BUCKET_NAME }}"

          # Sync build files to S3
          aws s3 sync build/ s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }} \
            --delete \
            --cache-control "max-age=31536000" \
            --exclude "*.html" \
            --exclude "service-worker.js"

          # Upload HTML files with no-cache
          aws s3 sync build/ s3://${{ steps.get-bucket-name.outputs.BUCKET_NAME }} \
            --cache-control "no-cache, no-store, must-revalidate" \
            --include "*.html" \
            --include "service-worker.js"

          echo "‚úÖ Frontend deployed to S3"

      # Step 12: Invalidate CloudFront cache
      - name: Invalidate CloudFront cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üîÑ Getting CloudFront distribution ID..."

          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendCloudFrontDistributionId`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})

          if [ -z "$DISTRIBUTION_ID" ] || [ "$DISTRIBUTION_ID" = "None" ]; then
            echo "‚ùå Error: CloudFront distribution ID not found"
            exit 1
          fi

          echo "üîÑ Creating CloudFront invalidation..."
          aws cloudfront create-invalidation \
            --distribution-id $DISTRIBUTION_ID \
            --paths "/*"

          echo "‚úÖ CloudFront invalidation created"
          echo "‚è≥ Cache invalidation may take 5-15 minutes to complete"

      # Step 13: Display URLs
      - name: Display deployment URLs
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Your application URLs:"

          CLOUDFRONT_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`FrontendCloudFrontURL`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})

          CUSTOM_DOMAIN_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`CustomDomainURL`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }} 2>/dev/null || echo "None")

          API_URL=$(aws cloudformation describe-stacks \
            --stack-name bedrock-query-stack \
            --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
            --output text \
            --region ${{ secrets.AWS_REGION }})

          if [ "$CUSTOM_DOMAIN_URL" != "None" ] && [ ! -z "$CUSTOM_DOMAIN_URL" ]; then
            echo "üåê Custom Domain: $CUSTOM_DOMAIN_URL"
            echo "üåê CloudFront URL: $CLOUDFRONT_URL (backup)"
          else
            echo "üåê Frontend URL: $CLOUDFRONT_URL"
          fi

          echo "üîó API URL: $API_URL"
          echo ""
          echo "‚è≥ Note: CloudFront cache invalidation may take 5-15 minutes to complete"

          if [ "$CUSTOM_DOMAIN_URL" != "None" ] && [ ! -z "$CUSTOM_DOMAIN_URL" ]; then
            echo "üìã SSL Certificate DNS validation may take up to 30 minutes for first deployment"
          fi
