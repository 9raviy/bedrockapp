# GitHub Secrets Setup Guide

This guide explains how to set up GitHub Secrets for automated deployment of your BedrockApp.

## üîê Required GitHub Secrets

Navigate to your GitHub repository ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions, then add the following secrets:

### AWS Configuration

| Secret Name | Description | Example Value |
|-------------|-------------|---------------|
| `AWS_ACCESS_KEY_ID` | AWS Access Key ID for deployment | `AKIAIOSFODNN7EXAMPLE` |
| `AWS_SECRET_ACCESS_KEY` | AWS Secret Access Key | `wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY` |
| `AWS_REGION` | AWS Region for deployment | `us-west-2` |

### Domain Configuration

| Secret Name | Description | Example Value |
|-------------|-------------|---------------|
| `DOMAIN_NAME` | Your custom domain name | `yourdomain.com` |
| `SUBDOMAIN_NAME` | Subdomain for production | `quiz` |
| `HOSTED_ZONE_ID` | Route 53 Hosted Zone ID | `Z1D633PJN98FT9` |

## üìã How to Get These Values

### AWS Credentials
1. **AWS Access Keys**:
   - Go to AWS Console ‚Üí IAM ‚Üí Users ‚Üí Your User ‚Üí Security credentials
   - Create Access Key ‚Üí Command Line Interface (CLI)
   - Copy the Access Key ID and Secret Access Key

2. **AWS Region**:
   - Choose the AWS region closest to your users (e.g., `us-west-2`, `us-east-1`, `eu-west-1`)

### Domain Settings
1. **Domain Name**:
   - Your registered domain (e.g., `yourdomain.com`)

2. **Subdomain Name**:
   - For production: `quiz` (creates `quiz.yourdomain.com`)
   - Development will use `dev-quiz.yourdomain.com`

3. **Hosted Zone ID**:
   - Go to AWS Console ‚Üí Route 53 ‚Üí Hosted zones
   - Click on your domain ‚Üí Copy the Hosted zone ID

## üöÄ Environment Setup

After setting up GitHub Secrets:

1. **Configure Local Environment**:
   ```bash
   node setup-environment.js
   ```

2. **Commit Configuration**:
   ```bash
   git add config/environments/
   git commit -m "Add environment configuration"
   ```

3. **Deploy**:
   - Push to `main` branch for production deployment
   - Push to `develop` branch for development deployment

## üîí Security Best Practices

- ‚úÖ **Never commit secrets** to the repository
- ‚úÖ **Use IAM roles** with minimal required permissions
- ‚úÖ **Rotate access keys** regularly
- ‚úÖ **Monitor AWS CloudTrail** for access logs
- ‚úÖ **Enable MFA** on AWS accounts

## üõ†Ô∏è IAM Permissions Required

Your AWS user/role needs the following permissions:

```json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "cloudformation:*",
        "s3:*",
        "lambda:*",
        "apigateway:*",
        "route53:*",
        "acm:*",
        "cloudfront:*",
        "iam:CreateRole",
        "iam:DeleteRole",
        "iam:AttachRolePolicy",
        "iam:DetachRolePolicy",
        "iam:PutRolePolicy",
        "iam:DeleteRolePolicy",
        "iam:GetRole",
        "iam:PassRole"
      ],
      "Resource": "*"
    }
  ]
}
```

## üè∑Ô∏è Environment-Specific Deployments

- **Production** (`main` branch):
  - Domain: `https://quiz.yourdomain.com`
  - Optimized for performance
  - Minimal logging

- **Development** (`develop` branch):
  - Domain: `https://dev-quiz.yourdomain.com`
  - Debug logging enabled
  - Higher resource allocation

## ‚ùó Troubleshooting

1. **Deployment Fails with Permission Errors**:
   - Check IAM permissions
   - Verify AWS credentials in GitHub Secrets

2. **SSL Certificate Issues**:
   - Ensure domain is verified in Route 53
   - Check ACM certificate validation

3. **DNS Not Resolving**:
   - Verify Hosted Zone ID is correct
   - Check Route 53 DNS settings

For more help, check the deployment logs in GitHub Actions.
